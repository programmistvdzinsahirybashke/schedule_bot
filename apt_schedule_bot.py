import calendar
import datetime
import time
import pendulum
import requests
import telebot
import sqlite3
import threading
from bs4 import BeautifulSoup
from selenium.webdriver.chrome.service import Service
from seleniumwire import webdriver
from telebot import types
from webdriver_manager.chrome import ChromeDriverManager
import configure
from telebot import custom_filters


def start_bot():
    global MY_GROUP
    global HELP_TEXT
    global GROUP_ID
    global CHAT_BY_DATETIME
    CHAT_BY_DATETIME = {}
    GROUP_ID = {
        '–ê–í221': 957,
        '–ê–ú221': 950,
        '–ê–ú223': 950,
        '–ê–ú222': 949,
        '–ë–£–†221': 961,
        '–ë–£–†222': 962,
        '–ë–£–•221': 947,
        '–ë–£–•222': 947,
        '–ì–§221': 960,
        '–ò–°221': 953,
        '–°–¢221': 955,
        '–°–¢222': 956,
        '–°–¢223': 954,
        '–ò–°222': 952,
        '–ò–°223': 971,
        '–ú–ï–•221': 959,
        '–ê–í211': 827,
        '–ê–ú211': 828,
        '–ê–ú212': 829,
        '–ë–£–†211': 830,
        '–ë–£–†212': 831,
        '–ë–£–•211': 832,
        '–ì–§211': 833,
        '–ò–°211': 834,
        '–ò–°212': 835,
        '–ò–°213': 727,
        '–ú–ï–•211': 836,
        '–°–ê211': 846,
        '–°–ê212': 846,
        '–°–ú211': 837,
        '–°–¢211': 838,
        '–°–¢212': 839,
        '–°–¢213': 840,
        '–≠–ö–°211': 841,
        '–≠–ö–°213': 841,
        '–≠–ö–°212': 842,
        '–≠–õ211': 844,
        '–≠–õ212': 844,
        '–≠–õ1212': 845,
        '–ê–í201': 702,
        '–ê–í202': 702,
        '–ê–î201': 698,
        '–ê–ú201': 695,
        '–ê–ú202': 694,
        '–ë–£–†201': 687,
        '–ë–£–†202': 688,
        '–ë–£–•201': 692,
        '–ì–§201': 689,
        '–ò–°201': 697,
        '–ò–°202': 696,
        '–ò–°203': 697,
        '–ú–ï–•201': 690,
        '–°–ú201': 693,
        '–°–¢201': 701,
        '–°–¢202': 700,
        '–°–¢203': 699,
        '–≠–ö–°201': 684,
        '–≠–ö–°204': 684,
        '–≠–ö–°202': 685,
        '–≠–ö–°1203': 704,
        '–≠–õ201': 691,
        '–≠–õ202': 691,
        '–≠–õ1202': 703,
        '–ê–í191': 620,
        '–ê–í192': 620,
        '–ê–î191': 548,
        '–ê–ú191': 628,
        '–ê–ú192': 629,
        '–ë–£–†191': 622,
        '–ë–£–†192': 625,
        '–ë–£–†193': 625,
        '–ì–§191': 626,
        '–ò–°191': 547,
        '–ò–°192': 619,
        '–ú–ï–•191': 549,
        '–°–ú191': 627,
        'C–¢194': 544,
        'C–¢191': 544,
        '–°–¢192': 617,
        '–°–¢193': 618,
        '–≠–ö–°191': 621,
        '–≠–ö–°192': 624,
        '–≠–ö–°193': 631,
        '–≠–ö–°195': 631,
        '–≠–õ191': 546,
        '–≠–õ192': 546,
    }
    HELP_TEXT = """–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤ –ê–ü–¢.
–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—Éüìé" –∏ –≤–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –±—É–∫–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–°211, –ú–ï–•201.
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞üóì –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞üì± –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
–ö–Ω–æ–ø–∫–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üìÖ" —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—à–ª–æ.
–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—Éüìé" –µ—â–µ —Ä–∞–∑, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É.
–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—åüìå" —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π id –∏ –≥—Ä—É–ø–ø—É.
–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å‚ùì"
–ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!"""

    bot = telebot.TeleBot(configure.config["token"], threaded=True, num_threads=300)
    bot.add_custom_filter(custom_filters.TextMatchFilter())
    bot.add_custom_filter(custom_filters.ChatFilter())

    conn = sqlite3.connect('db_main.db', check_same_thread=False)
    cursor = conn.cursor()

    def format_result(result):
        result = result.split("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")[0]
        result = result.split("–ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")[0]
        result = result.replace("\n\n\n\n\n\n", " ")
        result = result.replace("\n\n\n\n", "\n")
        result = result.replace("\n\n\n", "\n")
        result = result.replace("\n\n", "\n")
        result = result.replace("0730 - 0850", "\n7:30 - 8:50\n")
        result = result.replace("0855 - 1015", "\n8:55 - 10:15\n")
        result = result.replace("1040 - 1200", "\n10:40 - 12:00\n")
        result = result.replace("1210 - 1330", "\n12:10 - 13:30\n")
        result = result.replace("1340 - 1500", "\n13:40 - 15:00\n")
        result = result.replace("1520 - 1640", "\n15:20 - 16:40\n")
        result = result.replace("0730 - 0840", "\n7:30 - 8:40\n")
        result = result.replace("0845 - 0955", "\n8:45 - 9:55\n")
        result = result.replace("1000 - 1110", "\n10:00 - 11:10\n")
        result = result.replace("1210 - 1330", "\n12:10 - 13:30\n")
        result = result.replace("1340 - 1500", "\n13:40 - 15:00\n")
        return result

    @bot.message_handler(commands=["start"])
    def start(message, res=False):
        current_time = datetime.datetime.now()
        CHAT_BY_DATETIME[message.chat.id] = current_time
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        button1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—Éüìé")
        button2 = types.KeyboardButton("–ü–æ–º–æ—â—å‚ùì")

        markup.add(button1, button2)

        def db_table_val(user_id, nickname, username):
            register_user = "INSERT OR IGNORE INTO test (user_id, nickname, username) VALUES (?, ?, ?)"
            columns = (user_id, nickname, username)
            cursor.execute(register_user, columns)
            conn.commit()

        us_id = message.from_user.id
        us_name = message.from_user.first_name
        username = message.from_user.username

        db_table_val(user_id=us_id, nickname=us_name, username=username)
        bot.reply_to(message, HELP_TEXT, reply_markup=markup)
        bot.send_photo(message.chat.id, open("screenshots/apt_bot.jpg", 'rb'))

    @bot.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üóì'])
    def get_text_today(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                def get_result_today(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()

                    if group:
                        my_group = group[0]

                        today = pendulum.today('Europe/Moscow').format('YYYY-MM-DD')
                        response_today = requests.get(f"https://almetpt.ru/2020/site/schedule/group/{my_group}/{today}")
                        soup = BeautifulSoup(response_today.text, "lxml")
                        schedule = soup.find("div", class_="container")

                        if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."
                        else:
                            for item in schedule:
                                if item == "":
                                    item.replace("", "1")

                            result = f'{schedule.text}'
                            return format_result(result)

                bot.reply_to(message, get_result_today(message.from_user.id))

    @bot.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üóì'])
    def get_text_tomorrow(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                def get_result_tomorrow(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()

                    if group:
                        my_group = group[0]

                        tomorrow = pendulum.tomorrow('Europe/Moscow').format('YYYY-MM-DD')
                        response_check_tomorrow = requests.get(
                            f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{tomorrow}')
                        soup = BeautifulSoup(response_check_tomorrow.text, 'lxml')
                        schedule = soup.find("div", class_="container")

                        if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!"
                        else:
                            for item in schedule:
                                if item == "":
                                    item.replace("", "1")
                            result = f'{schedule.text}'
                            return format_result(result)

                bot.reply_to(message, get_result_tomorrow(message.from_user.id))

    @bot.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üì±'])
    def get_screen_today(message):
        need_seconds = 8
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                def get_screenshot_today(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()

                    if group:
                        my_group = group[0]

                    if not last_datetime:
                        CHAT_BY_DATETIME[message.chat.id] = current_time
                    else:
                        delta_seconds = (current_time - last_datetime).total_seconds()
                        seconds_left = int(need_seconds - delta_seconds)

                        if seconds_left > 0:
                            bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
                        else:
                            CHAT_BY_DATETIME[message.chat.id] = current_time
                            today = pendulum.today('Europe/Moscow').format('YYYY-MM-DD')
                            response_today = requests.get(f"https://almetpt.ru/2020/site/schedule/group/{my_group}/{today}")
                            soup = BeautifulSoup(response_today.text, "lxml")
                            schedule = soup.find("div", class_="container")

                            if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                                return "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."
                            else:
                                options = webdriver.ChromeOptions()
                                options.add_argument('--no-sandbox')
                                options.add_argument("--disable-dev-shm-usage")
                                options.add_argument("--headless")
                                driver = webdriver.Chrome(
                                    chrome_options=options,
                                    service=Service(ChromeDriverManager().install())
                                )

                                today = pendulum.today('Europe/Moscow').format('YYYY-MM-DD')
                                url = f"https://almetpt.ru/2020/site/schedule/group/{my_group}/{today}"
                                try:
                                    driver.set_window_size(850, 1050)
                                    driver.get(url=url)
                                    driver.implicitly_wait(60)
                                    screen_id = message.from_user.id
                                    driver.get_screenshot_as_file(f"screenshots/{screen_id}_today.png")
                                except Exception as ex:
                                    print(ex)
                                finally:
                                    driver.close()
                                    driver.quit()
                                return f"screenshots/{screen_id}_today.png"

                screen = get_screenshot_today(message.from_user.id)
                if screen == "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.":
                    bot.reply_to(message, "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
                else:
                    bot.send_photo(message.chat.id, open(screen, 'rb'))

    @bot.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üì±'])
    def get_screen_tomorrow(message):
        need_seconds = 8
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                def get_screenshot_tomorrow(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()

                    if group:
                        my_group = group[0]

                        tomorrow = pendulum.tomorrow('Europe/Moscow').format('YYYY-MM-DD')
                        response_check_tomorrow = requests.get(f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{tomorrow}')
                        soup = BeautifulSoup(response_check_tomorrow.text, 'lxml')
                        schedule = soup.find("div", class_="container")

                        if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!"
                        else:
                            options = webdriver.ChromeOptions()
                            options.add_argument("--headless")
                            options.add_argument('--no-sandbox')
                            options.add_argument("--disable-dev-shm-usage")
                            options.add_argument("--remote-debugging-port=9222")
                            driver = webdriver.Chrome(
                                chrome_options=options,
                                service=Service(ChromeDriverManager().install())
                            )

                            tomorrow = pendulum.tomorrow('Europe/Moscow').format('YYYY-MM-DD')
                            url = f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{tomorrow}'
                            try:
                                driver.set_window_size(850, 1050)
                                driver.get(url=url)
                                driver.implicitly_wait(60)
                                screen_id = message.from_user.id
                                driver.get_screenshot_as_file(f"screenshots/{screen_id}_tomorrow.png")
                            except Exception as ex:
                                print(ex)
                            finally:
                                driver.close()
                                driver.quit()
                            return f"screenshots/{screen_id}_tomorrow.png"

                screen = get_screenshot_tomorrow(message.from_user.id)
                if screen == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!":
                    bot.reply_to(message, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!")
                else:
                    bot.send_photo(message.chat.id, open(screen, 'rb'))

    @bot.message_handler(text=['–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—Éüìé'])
    def request_group(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)

        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                def update_group_val(user_group: str):
                    us_id = message.from_user.id
                    sqlite_update_query = 'UPDATE test SET user_group = ? WHERE user_id = ?'
                    column_values = (user_group, us_id)
                    cursor.execute(sqlite_update_query, column_values)
                    conn.commit()

                def update_group(message):
                    GROUP = message.text.upper()

                    if GROUP not in GROUP_ID:
                        def input_group(message):
                            msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–°211")
                            bot.register_next_step_handler(msg, active)

                        def active():
                            print(GROUP)

                        bot.reply_to(message, f"–ì—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ "
                                              f"–≥—Ä—É–ø–ø—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n–í—ã –≤–≤–µ–ª–∏: {GROUP}")
                        GROUP = message.text
                        return
                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

                        button1 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üóì")
                        button2 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üóì")
                        button3 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üì±")
                        button4 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üì±")
                        button5 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—Éüìé")
                        button6 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üìÖ")
                        button7 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—åüìå")
                        button8 = types.KeyboardButton("–ü–æ–º–æ—â—å‚ùì")

                        markup.add(button1, button2)
                        markup.add(button3, button4)
                        markup.add(button5, button6)
                        markup.add(button7, button8)

                        bot.reply_to(message, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {GROUP}", reply_markup=markup)

                    MY_GROUP = GROUP_ID[GROUP]
                    update_group_val(user_group=MY_GROUP)

                get_group1 = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–°211):")
                bot.register_next_step_handler(get_group1, update_group)

    @bot.message_handler(text=['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üìÖ'])
    def monday(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)

        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time

                def check_monday(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()

                    if group:
                        my_group = group[0]

                    today = datetime.date.today()
                    if calendar.day_name[today.weekday()] == 'Saturday':
                        monday = today + datetime.timedelta(days=2)
                        response_check_tomorrow = requests.get(
                            f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{monday}')
                        soup = BeautifulSoup(response_check_tomorrow.text, 'lxml')
                        schedule = soup.find("div", class_="container")

                        if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!"
                        else:
                            options = webdriver.ChromeOptions()
                            options.add_argument("--headless")
                            options.add_argument('--no-sandbox')
                            options.add_argument("--disable-dev-shm-usage")
                            options.add_argument("--remote-debugging-port=9222")
                            driver = webdriver.Chrome(
                                chrome_options=options,
                                service=Service(ChromeDriverManager().install())
                            )
                            url = f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{monday}'
                            try:
                                driver.set_window_size(850, 1050)
                                driver.get(url=url)
                                driver.implicitly_wait(60)
                                screen_id = message.from_user.id
                                driver.get_screenshot_as_file(f"screenshots/{screen_id}_monday.png")
                            except Exception as ex:
                                print(ex)
                            finally:
                                driver.close()
                                driver.quit()
                            return f"screenshots/{screen_id}_monday.png"

                    elif calendar.day_name[today.weekday()] == 'Sunday':
                        monday = today + datetime.timedelta(days=1)
                        response_check_tomorrow = requests.get(
                            f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{monday}')
                        soup = BeautifulSoup(response_check_tomorrow.text, 'lxml')
                        schedule = soup.find("div", class_="container")

                        if '–≥–æ–¥–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' in schedule.text:
                            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!"
                        else:
                            options = webdriver.ChromeOptions()
                            options.add_argument("--headless")
                            options.add_argument('--no-sandbox')
                            options.add_argument("--disable-dev-shm-usage")
                            options.add_argument("--remote-debugging-port=9222")
                            driver = webdriver.Chrome(
                                chrome_options=options,
                                service=Service(ChromeDriverManager().install())
                            )
                            url = f'https://almetpt.ru/2020/site/schedule/group/{my_group}/{monday}'
                            try:
                                driver.set_window_size(850, 1050)
                                driver.get(url=url)
                                driver.implicitly_wait(60)
                                screen_id = message.from_user.id
                                driver.get_screenshot_as_file(f"screenshots/{screen_id}_monday.png")
                            except Exception as ex:
                                print(ex)
                            finally:
                                driver.close()
                                driver.quit()
                            return f"screenshots/{screen_id}_monday.png"

                screen = check_monday(message.from_user.id)
                if screen == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!":
                    bot.reply_to(message, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–æ!")
                else:
                    bot.send_photo(message.chat.id, open(screen, 'rb'))

    @bot.message_handler(text=['–ü—Ä–æ—Ñ–∏–ª—åüìå'])
    def profile(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time

                def show_profile(user_id: int):
                    cursor.execute("SELECT user_group FROM test WHERE user_id = ?", (user_id,))
                    group = cursor.fetchone()
                    cursor.execute("SELECT nickname FROM test WHERE user_id = ?", (user_id,))
                    nickname = cursor.fetchone()

                    if nickname:
                        result = nickname[0]

                    if group:
                        my_group = group[0]
                        switch_group_name = {v: k for k, v in GROUP_ID.items()}
                        group_name = switch_group_name[my_group]

                        return f"–í–∞—à –Ω–∏–∫: {result}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í–∞—à id: {message.from_user.id}"

                bot.reply_to(message, show_profile(message.from_user.id))

    @bot.message_handler(text=['–ü–æ–º–æ—â—å‚ùì'])
    def get_help(message):
        need_seconds = 5
        current_time = datetime.datetime.now()
        last_datetime = CHAT_BY_DATETIME.get(message.chat.id)
        if not last_datetime:
            CHAT_BY_DATETIME[message.chat.id] = current_time
        else:
            delta_seconds = (current_time - last_datetime).total_seconds()
            seconds_left = int(need_seconds - delta_seconds)

            if seconds_left > 0:
                bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
            else:
                CHAT_BY_DATETIME[message.chat.id] = current_time
                bot.reply_to(message, HELP_TEXT)

    @bot.message_handler(chat_id=[702999620], commands=['admin_check'])
    def admin_rep(message):
        bot.send_message(message.chat.id, "–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    @bot.message_handler(commands=['admin_check'])
    def not_admin(message):
        bot.send_message(message.chat.id, "–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    bot.polling(none_stop=True, skip_pending=True)


if __name__ == "__main__":
    while True:
        try:
            threading.Thread(target=start_bot()).start()
        except Exception as e:
            telebot.logger.error(e)
            time.sleep(2)
